#!/usr/bin/env python3
# encoding: utf-8

"""
ti is a simple and extensible time tracker for the command line. Visit the
project page (http://ti.sharats.me) for more details.

Usage:
  ti (o|on) <name> [<time>...]
  ti (f|fin) [<time>...]
  ti (s|status)
  ti (t|tag) <tag>...
  ti (n|note) <note-text>...
  ti (l|log) [today]
  ti (e|edit)
  ti (i|interrupt)
  ti --no-color
  ti -h | --help

Options:
  -h --help         Show this help.
  <start-time>...   A time specification (Go to http://ti.sharats.me for more on
                    this).
  <tag>...          Tags can be made of any characters, but its probably a good
                    idea to avoid whitespace.
  <note-text>...    Some arbitrary text to be added as `notes` to the currently
                    working project.
"""

import json, yaml
from datetime import datetime, timedelta
from collections import defaultdict
import re
import os, subprocess, tempfile
from os import path
import sys
from db import r

from colorama import *
from tzlocal import get_localzone

local_tz = get_localzone() 

class JsonStore(object):

    def load(self):

        data= {
                 'work':[ item for item in r.table("work").order_by(r.desc("start")).run()],
                 'interrupt_stack':[]
               }
        return data

    def dump(self, data):
        for index, workPeriod in enumerate(data['work']):
            for key,value in workPeriod.items():
                if key in ('start','end'):
                    if type(data['work'][index][key]) != datetime:
                        data['work'][index][key] = parse_isotime(value)
                    else:
                        try:
                            data['work'][index][key] = pytz.utc.localize(data['work'][index][key])
                        except ValueError:
                            pass
        for i in data['work']:
            if 'id' in i:
                r.table("work").replace(i).run()
            else:
                r.table("work").insert(i).run()


def red(str):
    if use_color:
        return Fore.RED + str + Fore.RESET
    else:
        return str

def green(str):
    if use_color:
        return Fore.GREEN + str + Fore.RESET
    else: 
        return str

def yellow(str):
    if use_color: 
        return Fore.YELLOW + str + Fore.RESET
    else:
        return str

def blue(str):
    if use_color: 
        return Fore.BLUE + str + Fore.RESET
    else:
        return str


def action_on(name, time):
    data = store.load()
    work = data['work']

    if work and 'end' not in work[-1]:
        print('You are already working on ' + yellow(work[-1]['name']) +
                '. Stop it or use a different sheet.', file=sys.stderr)
        raise SystemExit(1)

    entry = {
        'name': name,
        'start': time,
    }

    work.append(entry)
    store.dump(data)

    print('Start working on ' + green(name) + '.')


def action_fin(time, back_from_interrupt=True):
    data = ensure_working()
    current = data[0]
    print(time)
    current['end'] = time
    print(current)
    store.dump({"work":[current,]})
    print('So you stopped working on ' + red(current['name']) + '.')

def action_interrupt(name, time):
    ensure_working()

    action_fin(time, back_from_interrupt=False)

    data = store.load()
    if 'interrupt_stack' not in data:
        data['interrupt_stack'] = []
    interrupt_stack = data['interrupt_stack']
    work = data['work']

    interrupted = data['work'][-1]
    interrupt_stack.append(interrupted)
    store.dump(data)

    action_on('interrupt: ' + green(name), time)
    print('You are now %d deep in interrupts.' % len(interrupt_stack))


def action_note(content):
    ensure_working()

    data = store.load()
    current = data['work'][-1]

    if 'notes' not in current:
        current['notes'] = [content]
    else:
        current['notes'].append(content)

    store.dump(data)

    print('Yep, noted to ' + yellow(current['name']) + '.')


def action_tag(tags):
    ensure_working()

    data = store.load()
    current = data['work'][-1]

    current['tags'] = set(current.get('tags') or [])
    current['tags'].update(tags)
    current['tags'] = list(current['tags'])

    store.dump(data)

    tag_count = len(tags)
    print('Okay, tagged current work with ' + str(tag_count) + ' tag' +
            ('s' if tag_count > 1 else '') + '.')

def action_status():
    try:
        ensure_working()
    except SystemExit(1):
        return

    data = store.load()
    current = data['work'][-1]

    start_time = parse_isotime(current['start'])
    diff = timegap(start_time, datetime.now())

    print('You have been working on {0} for {1}.'
            .format(green(current['name']), diff))

def timeToString(name, item):

    if type(item['delta'])==int:
        secs = item['delta']
    else:
        secs = item['delta'].seconds
    tmsg = []
    if secs > 3600:
        hours = int(secs / 3600)
        secs -= hours * 3600
        tmsg.append(str(hours) + ' hour' + ('s' if hours > 1 else ''))

    if secs > 60:
        mins = int(secs / 60)
        secs -= mins * 60
        tmsg.append(str(mins) + ' minute' + ('s' if mins > 1 else ''))

    if secs:
        tmsg.append(str(secs) + ' second' + ('s' if secs > 1 else ''))

    #log[name]['tmsg'] 
    return ', '.join(tmsg)[::-1].replace(',', ' &'[::-1], 1)[::-1]

import pytz

import math
def action_log(period=None, tag=""):
    hourlyRate=20
#    tag = "machina"
    tag = "dodjo"
    work = r.table("work")
    if period:
        period = " ".join(period)
        period = parse_isotime(period)
        work=work.filter(r.row["start"]>period)
    log = defaultdict(lambda: {'delta': timedelta()})
    current = None

    if tag:
        work = work.filter(
           lambda work:
               work["tags"].contains(tag)
       )

    work= work.distinct()

    for item in work.run():
        start_time = item['start']
        if 'end' in item:
            log[item['name']]['delta'] += item['end'] - start_time
        else:
            log[item['name']]['delta'] += pytz.utc.localize(datetime.now()) - start_time
            current = item['name']

    name_col_len = 0

    total=0
    for key,value in log.items():
        total += value['delta'].seconds

    log['total']['delta']=total

    if period:
        print("For {} to {}".format(period, parse_isotime("now")))

    name_col_len = 0
    for name, item in list(log.items()):
        log[name]['tmsg'] = timeToString(name, item)
        name_col_len = max(name_col_len, len(name))


    def fooToSeconds(x):
        x = x[1]['delta']
        if type(x) == int:
            return x
        else:
            return x.seconds

    for name, item in sorted(list(log.items()), key=(fooToSeconds), reverse=True):
        print(name.ljust(name_col_len), ' ∙∙ ', item['tmsg'],
                end=' ← working\n' if current == name else '\n')
    print(green("${}".format(math.ceil(total/60/30)*(hourlyRate/2))))

def action_edit():
    if 'EDITOR' not in os.environ:
        print("Please set the 'EDITOR' environment variable", file=sys.stderr)
        raise SystemExit(1)

    data = store.load()
    yml = yaml.safe_dump(data, default_flow_style=False, allow_unicode=True)

    cmd = os.getenv('EDITOR')
    fd, temp_path = tempfile.mkstemp(prefix='ti.')
    with open(temp_path, "r+") as f:
        f.write(yml.replace('\n- ', '\n\n- '))
        f.seek(0)
        subprocess.check_call(cmd + ' ' + temp_path, shell=True)
        yml = f.read()
        f.truncate()
        f.close

    os.close(fd)
    os.remove(temp_path)

    try:
      data = yaml.load(yml)
    except:
      print("Oops, that YAML didn't appear to be valid!", file=sys.stderr)
      raise SystemExit(1)

    store.dump(data)


def is_working():
    data = r.table("work").filter(
        lambda work: (~work.has_fields('end'))
    ).run()
    data=[i for i in data]
    return data


def ensure_working():
    data = is_working()
    if data: 
        return data
    else:
        print("For all I know, you aren't working on anything."
            " I don't know what to do.", file=sys.stderr)
        print('See `ti -h` to know how to start working.', file=sys.stderr)
        raise SystemExit(1)


def to_datetime(timestr):
    return parse_isotime(timestr).strftime('%Y-%m-%dT%H:%M:%S.%fZ')

import parsedatetime
from time import mktime

def parse_engtime_new(timestr):
    now = datetime.now()
    if not timestr:
        return now

    cal = parsedatetime.Calendar()
    time_struct, parse_status = cal.parse(timestr)
    parsedTime = datetime.fromtimestamp(mktime(time_struct))
    return parsedTime


def parse_engtime_old(timestr):

    now = datetime.now()
    
    if not timestr or timestr.strip() == 'now':
        return now

    match = re.match(r'(\d+|a) \s* (s|secs?|seconds?) \s+ ago $', timestr, re.X)
    if match is not None:
        n = match.group(1)
        seconds = 1 if n == 'a' else int(n)
        return now - timedelta(seconds=seconds)

    match = re.match(r'(\d+|a) \s* (mins?|minutes?) \s+ ago $', timestr, re.X)
    if match is not None:
        n = match.group(1)
        minutes = 1 if n == 'a' else int(n)
        return now - timedelta(minutes=minutes)

    match = re.match(r'(\d+|a|an) \s* (hrs?|hours?) \s+ ago $', timestr, re.X)
    if match is not None:
        n = match.group(1)
        hours = 1 if n in ['a', 'an'] else int(n)
        return now - timedelta(hours=hours)

    raise ValueError("Don't understand the time '" + timestr + "'")

parse_engtime = parse_engtime_new

#Why does this exist?
def parse_isotime(isotime):
    try:
        time = datetime.strptime(isotime, '%Y-%m-%dT%H:%M:%S.%fZ')
    except:
        time = parse_engtime(isotime)
    time = pytz.utc.localize(time) 
    return time

def timegap(start_time, end_time):
    diff = end_time - start_time

    mins = diff.seconds / 60

    if mins == 0:
        return 'less than a minute'
    elif mins == 1:
        return 'a minute'
    elif mins < 44:
        return '{} minutes'.format(mins)
    elif mins < 89:
        return 'about an hour'
    elif mins < 1439:
        return 'about {} hours'.format(mins / 60)
    elif mins < 2519:
        return 'about a day'
    elif mins < 43199:
        return 'about {} days'.format(mins / 1440)
    elif mins < 86399:
        return 'about a month'
    elif mins < 525599:
        return 'about {} months'.format(mins / 43200)
    else:
        return 'more than a year'


def helpful_exit(msg=__doc__):
    print(msg, file=sys.stderr)
    raise SystemExit


def parse_args(argv=sys.argv):
    global use_color

    argv = argv

    if '--no-color' in argv:
        use_color = False
        argv.remove('--no-color')

    # prog = argv[0]
    if len(argv) == 1:
        helpful_exit('You must specify a command.')

    head = argv[1]
    tail = argv[2:]
      
    if head in ['-h', '--help', 'h', 'help']:
        helpful_exit()

    elif head in ['e', 'edit']:
        fn = action_edit
        args = {}

    elif head in ['o', 'on']:
        if not tail:
            helpful_exit('Need the name of whatever you are working on.')

        fn = action_on
        args = {
            'name': tail[0],
            'time': to_datetime(' '.join(tail[1:])),
        }

    elif head in ['f', 'fin']:
        fn = action_fin
        args = {'time': parse_isotime(' '.join(tail))}

    elif head in ['s', 'status']:
        fn = action_status
        args = {}

    elif head in ['l', 'log']:
        fn = action_log
        args = {'period': tail if tail else None}

    elif head in ['t', 'tag']:
        if not tail:
            helpful_exit('Please provide at least one tag to add.')

        fn = action_tag
        args = {'tags': tail}

    elif head in ['n', 'note']:
        if not tail:
            helpful_exit('Please provide some text to be noted.')

        fn = action_note
        args = {'content': ' '.join(tail)}

    elif head in ['i', 'interrupt']:
        if not tail:
            helpful_exit('Need the name of whatever you are working on.')

        fn = action_interrupt
        args = {
            'name': tail[0],
            'time': to_datetime(' '.join(tail[1:])),
        }
    elif head in ['p', 'project']:
        pass
    else:
        helpful_exit("I don't understand '" + head + "'")

    return fn, args

##-----------------
##The intent parser
##-----------------

import json
import sys
from adapt.intent import IntentBuilder
from adapt.engine import IntentDeterminationEngine

engine = IntentDeterminationEngine()

main_kwords = {
  "on": ["o", "on", "work on"],
  "fin": ["f","fin","finished"],
  "status": ["s","status"],
  "log": ["l","list","log"],
}


for key, value in main_kwords.items():
    for wt in value:
        engine.register_entity(wt, key)

on_intent = IntentBuilder("onIntent")\
    .require("on")\
    .require("Task")\
    .build()
engine.register_intent_parser(on_intent)

fin_intent = IntentBuilder("finIntent")\
    .require("fin")\
    .build()
engine.register_intent_parser(fin_intent)

status_intent = IntentBuilder("statusIntent")\
    .require("status")\
    .build()
engine.register_intent_parser(status_intent)

log_intent = IntentBuilder("logIntent")\
    .require("log")\
    .build()
engine.register_intent_parser(log_intent)

engine.register_regex_entity("(?P<Task>.*)")

#if __name__ == "__main__":
#    for intent in engine.determine_intent(' '.join(sys.argv[1:])):
#        if intent.get('confidence') > 0:
#            print(json.dumps(intent, indent=4))


def main():
    fn, args = parse_args()
    fn(**args)

store = JsonStore()

if __name__ == '__main__':
    use_color = True
    main()
